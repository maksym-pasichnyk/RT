#version 450 core

struct RaytraceVertex {
    vec3 Position;
    vec3 Normal;
    vec3 Color;
    vec2 TexCoord;
};

layout (local_size_x = 10, local_size_y = 10) in;

layout(set = 0, binding = 0, rgba32f) uniform image2D averrageTexture;
layout(set = 0, binding = 1, rgba32f) uniform image2D accumulateTexture;
layout(set = 0, binding = 2) readonly buffer ray_directions_data {
    vec4 rayDirections[];
};
layout(set = 0, binding = 3) readonly buffer index_buffer_object {
    int indices[];
};
layout(set = 0, binding = 4) readonly buffer vertex_buffer_object {
    RaytraceVertex vertices[];
};
layout(set = 0, binding = 5) uniform sampler mainSampler;
layout(set = 0, binding = 6) uniform texture2D mainTexture;

layout(push_constant) uniform push_constant_data {
    vec3 cameraPosition;
    float time;
    int accumulateFrame;
};

const float kEpsilon = 1e-5f;

struct AabbPositions {
    float minX;
    float minY;
    float minZ;
    float maxX;
    float maxY;
    float maxZ;
};

struct HitResult {
    float Distance;
    vec3  Normal;
    vec3  Position;
    vec2  TexCoord;
};

float PHI = 1.61803398874989484820459;

float random(in vec2 xy, in float seed) {
    return fract(tan(distance(xy * PHI, xy) * seed) * xy.x);
}

bool traceTriangle(
    in vec3 rayOrigin,
    in vec3 rayDirection,
    in vec3 v0,
    in vec3 v1,
    in vec3 v2,
    out float t,
    out float u,
    out float v,
    inout float distance
) {
    vec3 N = cross(v1 - v0, v2 - v0);

    float NdotRayDirection = dot(N, rayDirection);
    if (abs(NdotRayDirection) < kEpsilon) {
        return false;
    }
    float d = (dot(N, v0) - dot(N, rayOrigin)) / NdotRayDirection;

    if (d < 0) {
        return false;
    }

    if (distance < d) {
        return false;
    }

    vec3 P = rayOrigin + d * rayDirection;

    t = dot(N, cross(v1 - v0, P - v0));
    if (t < 0) {
        return false;
    }

    u = dot(N, cross(v2 - v1, P - v1));
    if (u < 0) {
        return false;
    }

    v = dot(N, cross(v0 - v2, P - v2));
    if (v < 0) {
        return false;
    }

    distance = d;
    return true;
}

HitResult missHit() {
    HitResult ret;
    ret.Distance = -1;
    return ret;
}

HitResult createHit(float distance, in vec3 normal, in vec3 position, in vec2 texcoord) {
    HitResult ret;
    ret.Distance = distance;
    ret.Normal = normal;
    ret.Position = position;
    ret.TexCoord = texcoord;
    return ret;
}

HitResult trace(
    in vec3 rayOrigin,
    in vec3 rayDirection
) {
    int firstIndex = -1;

    float T, U, V;
    float distance = 100000.0f;
    for (int i = 0; i < 3 * 12; i += 3) {
        vec3 v0 = vertices[indices[i + 0]].Position;
        vec3 v1 = vertices[indices[i + 1]].Position;
        vec3 v2 = vertices[indices[i + 2]].Position;

        float t;
        float u;
        float v;
        if (traceTriangle(rayOrigin, rayDirection, v0, v1, v2, t, u, v, distance)) {
            firstIndex = i;
            T = t;
            U = u;
            V = v;
        }
    }

    if (firstIndex >= 0) {
        vec3 n1 = vertices[indices[firstIndex + 0]].Normal;
        vec3 n2 = vertices[indices[firstIndex + 1]].Normal;
        vec3 n3 = vertices[indices[firstIndex + 2]].Normal;

        vec2 uv1 = vertices[indices[firstIndex + 0]].TexCoord;
        vec2 uv2 = vertices[indices[firstIndex + 1]].TexCoord;
        vec2 uv3 = vertices[indices[firstIndex + 2]].TexCoord;

        vec3 position = rayOrigin + rayDirection * distance;
        vec3 normal = (U * n1 + V * n2 + T * n3) / (U + V + T);
        vec2 texcoord = (U * uv1 + V * uv2 + T * uv3) / (U + V + T);
        return createHit(distance, normal, position, texcoord);
    }

    return missHit();
}

vec4 mainImage(
    in vec2 coord,
    in vec3 rayOrigin,
    in vec3 rayDirection
) {
    vec3 lightDirection = normalize(vec3(-1, -1, 1));
    float lightIntensity = 1.0f;
    float specularExponent = 0.3f;

    vec3 ro = rayOrigin;
    vec3 rd = rayDirection;

    vec3 color = vec3(0, 0, 0);
    vec3 skyColor = vec3(.6f, .7f, .9f);

    float multiplier = 1.0f;

    float ambient = 0.3f;

    for (int i = 0; i < 1; ++i) {
        HitResult hit = trace(ro, rd);
        if (hit.Distance <= 0) {
            color += skyColor * multiplier;
            break;
        }
        vec3 albedo = texture(sampler2D(mainTexture, mainSampler), hit.TexCoord).rgb;

        vec3 normal = hit.Normal;
        float diffuse = max(dot(normal, -lightDirection), 0.0f) * lightIntensity;
        float light = diffuse + ambient;

        color += albedo * light * multiplier;

        rd = reflect(rd, normal);
        ro = hit.Position + rd * 1e-2f;

        multiplier *= 0.0f;//materials[hit.Material].Metallic;
    }
    return vec4(color, 1.0f);
}

void main() {
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(accumulateTexture);

    if (coord.x > size.x || coord.y > size.y) {
        return;
    }

    int i = coord.y * size.x + coord.x;

    vec3 ro = cameraPosition;
    vec3 rd = rayDirections[i].xyz;

    vec4 newColor = mainImage(coord, ro, rd);

    if (accumulateFrame <= 1) {
        vec4 finalColor = vec4(pow(newColor.rgb, vec3(2.2f)), newColor.a);

        imageStore(accumulateTexture, coord, newColor);
        imageStore(averrageTexture, coord, finalColor);
    } else {
        vec4 oldColor = imageLoad(accumulateTexture, coord);

        vec4 accumulateColor = newColor + oldColor;
        vec4 averrageColor = accumulateColor / float(accumulateFrame);
        vec4 finalColor = vec4(pow(averrageColor.rgb, vec3(2.2f)), averrageColor.a);

        imageStore(accumulateTexture, coord, accumulateColor);
        imageStore(averrageTexture, coord, finalColor);
    }
}